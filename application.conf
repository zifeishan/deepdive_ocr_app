deepdive {

  db.default: {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://127.0.0.1:5432/ddocr"
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  schema.variables {
    # feature values
    features.feature_val: Boolean
    # labels
    labels.label_t: Boolean
    labels.label_c: Boolean
  }

  extraction.extractors: {
    # ext_feature_select {
    #   input: "SELECT * FROM features "
    #   output_relation: "filtered_features"
    #   udf: ${APP_HOME}"/udf/feature_select.py"
    #   before: ${APP_HOME}"/udf/before_feature_select.sh"
    # }

    ext_disagree_words {
      input: "SELECT docid, wordid FROM options where option_t = option_c"
      output_relation: "disagree_words"
      before: ${APP_HOME}"/udf/before_disagree_words.sh"
    }
  }

  inference.factors: {
    f_label_t_disagree {
      input_query: """
        SELECT features.*, labels.* FROM features INNER JOIN disagree_words
        ON ( features.docid = disagree_words.docid AND
          features.wordid = disagree_words.wordid ) 
        WHERE features.feature_val = true;
        """
      # features that are true imply the label.
      function: "IsTrue(labels.label_t)"
      weight: "?(features.feature_name)"
    }
    f_label_c_disagree {
      input_query: """
        SELECT features.*, labels.* FROM features INNER JOIN disagree_words
        ON ( features.docid = disagree_words.docid AND
          features.wordid = disagree_words.wordid ) 
        WHERE features.feature_val = true;
        """
      # features that are true imply the label.
      function: "IsTrue(labels.label_c)"
      weight: "?(features.feature_name)"
    }

    f_label_t {
      input_query: """
        SELECT features.*, labels.* FROM features INNER JOIN labels
        ON ( features.docid = labels.docid AND
          features.wordid = labels.wordid ) 
        WHERE features.feature_val = true;
        """
      # features that are true imply the label.
      function: "IsTrue(labels.label_t)"
      weight: "?(features.feature_name)"
    }
    f_label_c {
      input_query: """
        SELECT features.*, labels.* FROM features INNER JOIN labels
        ON ( features.docid = labels.docid AND
          features.wordid = labels.wordid ) 
        WHERE features.feature_val = true;
        """
      # features that are true imply the label.
      function: "IsTrue(labels.label_c)"
      weight: "?(features.feature_name)"
    }

  }

  calibration.holdout_fraction: 0.25

  sampler.sampler_args: "-l 100 -s 10 -i 100 -t 1"

  # pipeline.run: "test"

  # pipeline.pipelines.test: ["f_has_spouse_features", "f_has_spouse_symmetry"]


}