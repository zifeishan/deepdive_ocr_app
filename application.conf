deepdive {

  db.default: {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    # " (fix highlighting)
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  schema.variables {
    # labels
    # filtered_labels.label_t: Boolean
    # filtered_labels.label_c: Boolean
    cand_label.label: Boolean
  }

  extraction.extractors: {

    # K-fold a fraction of documents.
    ext_holdout_document {
      input: "select * from document"
      output_relation: "document"
      before: ${APP_HOME}"/udf/before_ext_fold.sh"
      udf: "true"
      after: ${APP_HOME}"/udf/kfold.py "${KFOLD_NUM}" "${KFOLD_ITER}" document docid"
      # udf: "/bin/cat"
    }

    # Extract naive ocr-specific features
    ext_naivefeature {
      input: """
        SELECT id as "candidate.id", 
          word as "candidate.word"
          from candidate
        """
      # input: "SELECT * from candidate where docid = 'JOURNAL_102371'"
      output_relation: "feature"
      before: ${APP_HOME}"/udf/before_naivefeature.sh"
      udf: ${APP_HOME}"/udf/ext_naivefeature.py"
    }

    ext_sup_1gram {
      dependencies: ["ext_holdout_document"]
      # input: "SELECT id from candidate"
      # Document table is already held out
      input: """SELECT id as "candidate.id" from candidate"""
      # input: "SELECT * from candidate where docid = 'JOURNAL_102371'"
      output_relation: "cand_label"
      before: ${APP_HOME}"/udf/before_cand_label.sh"
      udf: ${APP_HOME}"/udf/ext_cand_label.py"
      after: ${APP_HOME}"/udf/after_cand_label_sup1gram.sh"
    }
    # DO NOT HAVE DATA FOR JOURNAL_107511

    ext_sup_1gram_2gram {
      dependencies: ["ext_holdout_document"]
      # input: "SELECT id from candidate"
      # Document table is already held out
      input: """SELECT id as "candidate.id" from candidate"""
      # input: "SELECT * from candidate where docid = 'JOURNAL_102371'"
      output_relation: "cand_label"
      before: ${APP_HOME}"/udf/before_cand_label.sh"
      udf: ${APP_HOME}"/udf/ext_cand_label.py"
      after: ${APP_HOME}"/udf/after_cand_label_sup1gram_2gram.sh"
    }

  }

  inference.factors: {

    ########## NEW FORMAT FOR INFERENCE RULES #########
    # For develop branch:::
    # Weight column
    # ID for each variables
    # label (var) column
    # naming convention: select id from 


    f_naivefeature {
      input_query: """
        select 
          feature.fname as "feature.fname", 
          cand_label.id as "cand_label.id",
          cand_label.label as "cand_label.label"
        from feature join cand_label on feature.candidateid = cand_label.id
        """
      function: "IsTrue(cand_label.label)"
      weight: "?(feature.fname)"
    }


    f_ocr_bias {
      input_query: """
        select 
          candidate.source as "candidate.source",
          cand_label.id as "cand_label.id",
          cand_label.label as "cand_label.label"
        from cand_label right join candidate on cand_label.candidateid = candidate.id
        """
      function: "IsTrue(cand_label.label)"
      weight: "?(candidate.source)"
    }

    f_simple_constraint {
      # Cannot reverse natural join order: id MUST BE cand_label.id!!
      # select c1.id as "candidate.c1.id", 
        # c2.id as "candidate.c2.id", 
      input_query: """
        select 
          l1.id as "cand_label.l1.id", 
          l2.id as "cand_label.l2.id", 
          l1.label as "cand_label.l1.label", 
          l2.label as "cand_label.l2.label"
        from candidate as c1, candidate as c2, cand_label as l1, cand_label as l2
        where c1.id = l1.candidateid and c2.id = l2.candidateid
          and c1.docid = c2.docid 
          and c1.wordid = c2.wordid 
          and c1.candid != c2.candid
          and c1.word != c2.word
        """
      function: "Imply(cand_label.l1.label, ! cand_label.l2.label)"
      weight: "?"
      # weight: 100000
    }

    f_same_equal {
      # Different source, same output: both correct / both wrong
      input_query: """
        -- select c1.id as "c1.id", c2.id as "c2.id", l1.id as "l1.id", l2.id as "l2.id", l1.label as "l1.label", l2.label as "l2.label"
        select
          l1.id as "cand_label.l1.id", 
          l2.id as "cand_label.l2.id", 
          l1.label as "cand_label.l1.label", 
          l2.label as "cand_label.l2.label"
        from candidate as c1, candidate as c2, cand_label as l1, cand_label as l2
        where c1.id = l1.candidateid and c2.id = l2.candidateid
          and c1.docid = c2.docid 
          and c1.wordid = c2.wordid 
          and c1.source != c2.source
          and c1.word = c2.word
        """
      # Symmetric for c1 and c2
      function: "Equal(cand_label.l1.label, cand_label.l2.label)"
      weight: "?"
    }

    f_agree_bonus {
      # Different source, same output: both correct
      input_query: """
        select
          l1.id as "cand_label.l1.id", 
          l2.id as "cand_label.l2.id", 
          l1.label as "cand_label.l1.label", 
          l2.label as "cand_label.l2.label"
        from candidate as c1, candidate as c2, cand_label as l1, cand_label as l2
        where c1.id = l1.candidateid and c2.id = l2.candidateid
          and c1.docid = c2.docid 
          and c1.wordid = c2.wordid 
          and c1.source != c2.source
          and c1.word = c2.word
        """
      # Symmetric for c1 and c2
      function: "IsTrue(cand_label.l1.label)"
      weight: "?"
    }

    # Positive: In google ngram
    f_1gram_pos {
      input_query: """
        select 
          cand_label.id as "cand_label.id",
          cand_label.label as "cand_label.label"
        FROM (cand_label right join candidate on cand_label.candidateid = candidate.id)
        where word in 
        (select gram from ngram_1 where count > 1000)
        """
      function: "IsTrue(cand_label.label)"
      weight: "?"
    }
    # negative: not in google ngram, or too few
    f_1gram_neg {
      input_query: """
        select 
          cand_label.id as "cand_label.id",
          cand_label.label as "cand_label.label"
        FROM (cand_label right join candidate on cand_label.candidateid = candidate.id)
        where word not in 
        (select gram from ngram_1 where count > 1000)
        """
      function: "IsTrue(!cand_label.label)"
      weight: "?"
    }
    # Positive: In google ngram
    f_2gram_pos {
      input_query: """
        select
          l1.id as "cand_label.l1.id", 
          l2.id as "cand_label.l2.id", 
          l1.label as "cand_label.l1.label", 
          l2.label as "cand_label.l2.label"
        from candidate as c1, candidate as c2, 
          cand_label as l1, cand_label as l2
        where c1.id = l1.candidateid and c2.id = l2.candidateid
          and c1.docid = c2.docid 
          and c1.wordid = c2.wordid - 1
          and c1.word||' '||c2.word in 
          (select gram from ngram_2 where count > 100)
        """
      function: "And(cand_label.l1.label, cand_label.l2.label)"
      weight: "?"
    }
  }

  calibration.holdout_fraction: ${CALI_FRACTION}

  # sampler.sampler_args: "-l 100 -s 10 -i 100 -t 1"

  # Madmax localization
  deepdive.inference.batch_size = 100000
  # deepdive.sampler.java_args: "-Xms1g -Xmx8g"
  deepdive.sampler.sampler_args: "-l 1000 -s 10 -i 100"

  pipeline.pipelines.naiveextract: ["ext_naivefeature"]

  pipeline.pipelines.noextract: ["ext_sup_1gram", "ext_holdout_document","f_naivefeature", "f_simple_constraint", "f_same_equal", "f_agree_bonus", "f_ocr_bias", "f_1gram_pos", "f_1gram_neg"]
  # pipeline.pipelines.labelonly: ["ext_sup_1gram"]
  pipeline.pipelines.empty: []
  pipeline.pipelines.simple: ["ext_sup_1gram", "ext_holdout_document", "f_ocr_bias"
  # , "f_simple_constraint"
  ]  # cannot use '', must use ""

  pipeline.pipelines.sup2gram_nonaive: ["ext_holdout_document", "ext_sup_1gram_2gram", "f_simple_constraint", "f_same_equal", "f_agree_bonus", "f_ocr_bias", "f_1gram_pos", "f_1gram_neg", "f_2gram_pos"]

  pipeline.pipelines.sup2gram_withextract: ["ext_holdout_document", "ext_naivefeature","ext_sup_1gram_2gram", "f_naivefeature", "f_simple_constraint", "f_same_equal", "f_agree_bonus", "f_ocr_bias", "f_1gram_pos", "f_1gram_neg", "f_2gram_pos"]

  
  pipeline.run: "simple"
  # pipeline.run: "sup2gram_light"
  # pipeline.run: "empty"
  # pipeline.run: "simple"
  # pipeline.run: "gramonly"

}
