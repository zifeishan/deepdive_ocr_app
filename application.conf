deepdive {

  db.default: {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://127.0.0.1:5437/ddocr"
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  schema.variables {
    # labels
    # filtered_labels.label_t: Boolean
    # filtered_labels.label_c: Boolean
    cand_label.label: Boolean
  }

  extraction.extractors: {

    # Extract naive ocr-specific features
    ext_naivefeature {
      input: "SELECT * from candidate;"
      # input: "SELECT * from candidate where docid = 'JOURNAL_102371';"
      output_relation: "feature"
      before: ${APP_HOME}"/udf/before_naivefeature.sh"
      udf: ${APP_HOME}"/udf/ext_naivefeature.py"
    }

    ext_cand_label {
      input: "SELECT id from candidate;"
      # input: "SELECT * from candidate where docid = 'JOURNAL_102371';"
      output_relation: "cand_label"
      before: ${APP_HOME}"/udf/before_cand_label.sh"
      udf: ${APP_HOME}"/udf/ext_cand_label.py"
    }

  }

  inference.factors: {

    f_naivefeature {
      input_query: """
        select * from feature join cand_label on feature.candidateid = cand_label.id limit 100;
        """
      function: "IsTrue(cand_label.label)"
      weight: "?(features.fname)"
    }

    f_simple_constraint {
      input_query: """
        select c1.id as "c1.id", c2.id as "c2.id", c1.label as "c1.label", c2.label as "c2.label" 
        from (candidate natural join cand_label) as c1 
        join (candidate natural join cand_label) as c2 
        on c1.docid = c2.docid 
          and c1.wordid = c2.wordid 
          and c1.candid != c2.candid
          and c1.word != c2.word;
        """
      function: "Imply(c1.label, !c2.label)"
      weight: "?"
    }

    f_same_equal {
      # Different source, same output: both correct / both wrong
      input_query: """
        select c1.id as "c1.id", c2.id as "c2.id", c1.label as "c1.label", c2.label as "c2.label"
        from (candidate natural join cand_label) as c1 
        join (candidate natural join cand_label) as c2 
        on c1.docid = c2.docid 
          and c1.wordid = c2.wordid 
          and c1.source != c2.source
          and c1.word = c2.word;
        """
      # Symmetric for c1 and c2
      function: "Equal(c1.label, c2.label)"
      weight: "?"
    }

    f_agree_bonus {
      # Different source, same output: both correct
      input_query: """
        select c1.id as "c1.id", c2.id as "c2.id", c1.label as "c1.label"
        from (candidate natural join cand_label) as c1 
        join (candidate natural join cand_label) as c2 
        on c1.docid = c2.docid 
          and c1.wordid = c2.wordid 
          and c1.source != c2.source
          and c1.word = c2.word;
        """
      # Symmetric for c1 and c2
      function: "IsTrue(c1.label)"
      weight: "?"
    }
  }

  calibration.holdout_fraction: ${CALI_FRACTION}

  # sampler.sampler_args: "-l 100 -s 10 -i 100 -t 1"

  # Madmax localization
  deepdive.inference.batch_size = 100000
  # deepdive.sampler.java_args: "-Xms1g -Xmx8g"
  deepdive.sampler.sampler_args: "-l 1000 -s 10 -i 100"

  pipeline.pipelines.naiveextract: ["ext_naivefeature"]

  pipeline.pipelines.noextract: ["ext_cand_label", "f_naivefeature", "f_simple_constraint", "f_same_equal", "f_agree_bonus"]
  pipeline.pipelines.empty: []

  pipeline.run: "noextract"
  # pipeline.run: "gramonly"

}
